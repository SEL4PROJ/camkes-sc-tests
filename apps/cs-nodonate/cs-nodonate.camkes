/*
 * Copyright 2015, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(NICTA_BSD)
 */

import <std_connector.camkes>;

import "components/Client/Client.camkes";
import "components/Server/Server.camkes";

assembly {
        composition {
                component Client client;
                component Server server;

                connection seL4RPC client_server(from client.i, to server.i);
        }
	configuration {
		client.control_priority = 50;
		client.control_period = 10000;
		client.control_deadline = 10000;
		client.control_exec_req = 10000;
		server.i_priority = 60;
		server.i_period = 10000;
		server.i_deadline = 10000;
		server.i_exec_req = 10000;
	}
}

/*
Scenarios to consider:
- client has enough SC: succeed 
- client doesn't have enough SC: succeed (roll over to the next period)
- server has enough SC: succeed
- server doesn't have enough SC: succeed (roll over to the next period)
- if client/server doesn't have enough SC
	- exec_req << period: succeed - longer delay
	- exec_req < period: succeed - shorter delay
	- exec_req = period: succeed - no delay
	- deadline? has this been removed?

should we time how long the calls take? or does it matter (thinking behind this: tell the difference between a call succedding in one period or having to wait for it to reset and continuing when it goes over budget and also how long the period is)

*/
